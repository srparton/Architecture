
iterativeSearch.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	48 83 ec 38          	sub    $0x38,%rsp #set stack pointer 
   4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax #move 0x28 into rax 
   b:	00 00 
   d:	48 89 44 24 28       	mov    %rax,0x28(%rsp) #move contents of rax into stackpointer off set by 0x28
  12:	31 c0                	xor    %eax,%eax #clear eax reg
  14:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp) #mov 1 into stackpointer address
  1b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp) #arr[1] = 2
  22:	00 
  23:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%rsp) #arr[2] = 3
  2a:	00 
  2b:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%rsp) #arr[3] = 4
  32:	00 
  33:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%rsp) #arr[4] = 5
  3a:	00 
  3b:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%rsp) #arr[5] = 6
  42:	00 
  43:	c7 44 24 18 07 00 00 	movl   $0x7,0x18(%rsp) #arr[6] = 7
  4a:	00 
  4b:	c7 44 24 1c 08 00 00 	movl   $0x8,0x1c(%rsp) #arr[7] = 8
  52:	00 
  53:	c7 44 24 20 09 00 00 	movl   $0x9,0x20(%rsp) #arr[8] = 9
  5a:	00 
  5b:	c7 44 24 24 0a 00 00 	movl   $0xa,0x24(%rsp) #arr[9] = 10
  62:	00 
  63:	b9 00 00 00 00       	mov    $0x0,%ecx #move 0 into ecx
  68:	eb 13                	jmp    7d <main+0x7d> #jump unconditionally to line 7d
  6a:	48 63 d0             	movslq %eax,%rdx #move contents of eax into rdx
  6d:	83 3c 94 05          	cmpl   $0x5,(%rsp,%rdx,4) #compare 5 with rsp + rdx * 4 (if key == arr[i])
  71:	74 05                	je     78 <main+0x78> # if equals jump to line 78
  73:	83 c0 01             	add    $0x1,%eax #add one into eax and store eax (found = true)
  76:	eb 05                	jmp    7d <main+0x7d> #jump to line 7d
  78:	b9 01 00 00 00       	mov    $0x1,%ecx #move 1 into ecx
  7d:	83 f8 09             	cmp    $0x9,%eax #compare 9 with whats in eax
  80:	0f 9e c2             	setle  %dl #set flag
  83:	38 d1                	cmp    %dl,%cl #compare dl and cl 
  85:	72 e3                	jb     6a <main+0x6a> #jump to line 6a
  87:	b8 00 00 00 00       	mov    $0x0,%eax #move 0 into eax
  8c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi #move rsp offset by 28 into rsi 
  91:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi #clear 
  98:	00 00 
  9a:	74 05                	je     a1 <main+0xa1> #jump to a1
  9c:	e8 00 00 00 00       	callq  a1 <main+0xa1> #print found 
  a1:	48 83 c4 38          	add    $0x38,%rsp #reset stack pointer 
  a5:	c3                   	retq    #return

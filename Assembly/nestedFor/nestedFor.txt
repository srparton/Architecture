
nestedFor.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	48 83 ec 38          	sub    $0x38,%rsp #set stack pointer for array
   4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax #move value into rax
   b:	00 00 
   d:	48 89 44 24 28       	mov    %rax,0x28(%rsp) #move rax into rsp offset by 0x28
  12:	31 c0                	xor    %eax,%eax #clear out eax
  14:	c7 04 24 0b 00 00 00 	movl   $0xb,(%rsp) #loading array values into arr arr[0] = 11
  1b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%rsp) #arr[1] = 2
  22:	00 
  23:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%rsp) #arr[2] = 4
  2a:	00 
  2b:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%rsp) #arr[3] = 100
  32:	00 
  33:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%rsp) #arr[4] = 5
  3a:	00 
  3b:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%rsp) #arr[5] = 6
  42:	00 
  43:	c7 44 24 18 63 00 00 	movl   $0x63,0x18(%rsp) #arr[6] = 99
  4a:	00 
  4b:	c7 44 24 1c 4d 00 00 	movl   $0x4d,0x1c(%rsp) #arr[7] = 77
  52:	00 
  53:	c7 44 24 20 2a 00 00 	movl   $0x2a,0x20(%rsp) #arr[8] = 42
  5a:	00 
  5b:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%rsp) #arr[9] = 1
  62:	00 
  63:	be 00 00 00 00       	mov    $0x0,%esi #move 0 into esi i = 0
  68:	eb 2e                	jmp    98 <main+0x98> #unconditionally jump to line 98
  6a:	48 63 d0             	movslq %eax,%rdx #move eax into rdx  temp = arr[i]
  6d:	8b 0c 94             	mov    (%rsp,%rdx,4),%ecx #move rsp + (rdx * 4) into ecx arr[i] = arr[j] 
  70:	48 63 d6             	movslq %esi,%rdx  #j = 0
  73:	8b 14 94             	mov    (%rsp,%rdx,4),%edx #rsp + rdx * 4
  76:	39 d1                	cmp    %edx,%ecx #compare edx with ecx
  78:	7d 0c                	jge    86 <main+0x86> #jump if greater than to line 86
  7a:	48 63 fe             	movslq %esi,%rdi #temp = arr[i]
  7d:	89 0c bc             	mov    %ecx,(%rsp,%rdi,4) #arr[i] = arr[j]
  80:	48 63 c8             	movslq %eax,%rcx #move value of eax into rcx
  83:	89 14 8c             	mov    %edx,(%rsp,%rcx,4) #arr[j] = temp 
  86:	83 c0 01             	add    $0x1,%eax # add one to eax
  89:	eb 05                	jmp    90 <main+0x90> #jump to line 90 unconditionally
  8b:	b8 00 00 00 00       	mov    $0x0,%eax #move 0 into eax
  90:	83 f8 09             	cmp    $0x9,%eax #compare 9 to eax (j < arrLen)
  93:	7e d5                	jle    6a <main+0x6a> #if less than then jump to line 6aj
  95:	83 c6 01             	add    $0x1,%esi #add one to i
  98:	83 fe 09             	cmp    $0x9,%esi #compare arrLen to 9
  9b:	7e ee                	jle    8b <main+0x8b> #if less than then jump to line 8b
  9d:	b8 00 00 00 00       	mov    $0x0,%eax #move 0 into eax
  a2:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi #move stack pointer off set into rdi
  a7:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi #clear rdi
  ae:	00 00 
  b0:	74 05                	je     b7 <main+0xb7> #jump if equal to line b7
  b2:	e8 00 00 00 00       	callq  b7 <main+0xb7> #function call jump to b7
  b7:	48 83 c4 38          	add    $0x38,%rsp #reset stack pointer
  bb:	c3                   	retq    #return


variables.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	48 83 ec 08          	sub    $0x8,%rsp -> allocate memory for the stack
   4:	ba ff 7f 00 00       	mov    $0x7fff,%edx -> mov 32767 into register edx
   9:	be 00 00 00 00       	mov    $0x0,%esi -> mov 0 into register esi
   e:	bf 01 00 00 00       	mov    $0x1,%edi -> mov 1 into register edi
  13:	b8 00 00 00 00       	mov    $0x0,%eax -> mov 0 into register eax
  18:	e8 00 00 00 00       	callq  1d <main+0x1d> -> call printf
  1d:	ba ff ff 00 00       	mov    $0xffff,%edx -> mov 65535 into register edx
  22:	be 00 00 00 00       	mov    $0x0,%esi -> mov 0 into register esi
  27:	bf 01 00 00 00       	mov    $0x1,%edi -> mov 1 into register edi
  2c:	b8 00 00 00 00       	mov    $0x0,%eax -> mov 0 into register eax
  31:	e8 00 00 00 00       	callq  36 <main+0x36> -> call printf
  36:	ba ff ff ff ff       	mov    $0xffffffff,%edx -> mov 4294967295 into regiter edx
  3b:	be 00 00 00 00       	mov    $0x0,%esi -> mov 0 into register esi
  40:	bf 01 00 00 00       	mov    $0x1,%edi -> mov 1 into register edi
  45:	b8 00 00 00 00       	mov    $0x0,%eax -> mov 0 into register eax
  4a:	e8 00 00 00 00       	callq  4f <main+0x4f> -> call printf
  4f:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx -> mov 2147483647 into register edx
  54:	be 00 00 00 00       	mov    $0x0,%esi -> move 0 into register esi
  59:	bf 01 00 00 00       	mov    $0x1,%edi -> move 1 into register edi
  5e:	b8 00 00 00 00       	mov    $0x0,%eax -> move 0 into register eax
  63:	e8 00 00 00 00       	callq  68 <main+0x68> -> call printf
  68:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx -> move 9223372036854775807 into rdx
  6f:	ff ff 7f
  72:	be 00 00 00 00       	mov    $0x0,%esi -> move 0 into esi
  77:	bf 01 00 00 00       	mov    $0x1,%edi -> move 1 into edi
  7c:	b8 00 00 00 00       	mov    $0x0,%eax -> move 0 into eax
  81:	e8 00 00 00 00       	callq  86 <main+0x86> -> call printf
  86:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx -> 18446744073709551615 into register rdx
  8d:	be 00 00 00 00       	mov    $0x0,%esi -> move 0 into register esi
  92:	bf 01 00 00 00       	mov    $0x1,%edi -> move 1 into register edi
  97:	b8 00 00 00 00       	mov    $0x0,%eax -> move 0 into register eax
  9c:	e8 00 00 00 00       	callq  a1 <main+0xa1> -> call printf
  a1:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # a9 <main+0xa9> -> move whats in memory address into register xmm0
  a8:	00
  a9:	be 00 00 00 00       	mov    $0x0,%esi -> move 0 into register esi
  ae:	bf 01 00 00 00       	mov    $0x1,%edi -> move 1 into register edi
  b3:	b8 01 00 00 00       	mov    $0x1,%eax -> move 1 into register eax
  b8:	e8 00 00 00 00       	callq  bd <main+0xbd> call printf 
  bd:	ba 63 00 00 00       	mov    $0x63,%edx -> move 99 into register edx
  c2:	be 00 00 00 00       	mov    $0x0,%esi -> move 0 into register esi
  c7:	bf 01 00 00 00       	mov    $0x1,%edi -> move 1 into register edi
  cc:	b8 00 00 00 00       	mov    $0x0,%eax -> move 0 into register eax
  d1:	e8 00 00 00 00       	callq  d6 <main+0xd6> call printf
  d6:	b8 00 00 00 00       	mov    $0x0,%eax -> move 0 into register eax
  db:	48 83 c4 08          	add    $0x8,%rsp -> deallocate memory into rsp
  df:	c3                   	retq
